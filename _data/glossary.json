{
    "Static server": "A static web server, or stack, consists of a computer (hardware) with an HTTP server (software). We call it **static** because the server sends its hosted files as-is to your browser",
    "Dynamic server": "A dynamic web server consists of a static web server plus extra software, most commonly an application server and a database. We call it **dynamic** because the application server updates the hosted files before sending content to your browser via the HTTP server",
    "Static Site Generator": "A static site generator is a tool that generates a full static HTML website based on raw data and a set of templates. Essentially, a static site generator automates the task of coding individual HTML pages and gets those pages ready to serve to users ahead of time. Because these HTML pages are pre-built, they can load very quickly in users' browsers.",
    "git": "Git is a Version Control System (VCS). It provides support for storing files and tracking any changes. The files, their histories, and any other information is grouped together in “repositories” (usually abbreviated “repo”). Unlike most earlier VCSs, which stored the repos in a central location, Git is a distributed VCS, a type of version control where the complete codebase—including its full version history—is mirrored on every developer’s computer. A remote repo will be created for a project, and any developer in the project team   will own their “local” copy by “cloning” the remote repo. As with any VCS, developers must notify Git of any changes they made to the files in the repo, a commit. This only updates the local repo. The developer must push the changes to notify the “remote” repo and  must pull to learn of any changes made by other developers. Because developers can change their “local” copy of the repo  independently of each other, when independent streams of work need to be combined there is the possibility for the same file to  be changed in inconsistent ways, resulting in “merge conflicts”. Git (and most VCSs) provides mechanisms for understanding and resolving these conflicts.",
    "Github Classroom": "Github Classroom (GHC) is “a teacher-facing tool that uses the GitHub API to enable the GitHub workflow for education”. GHC allows the creation of “classrooms” and “assignments” within classroom. Classrooms provide the means  to organise assignments for a course, repos for the assignments, and students to the repos",
    "GitHub Classroom Assignment": "When the teacher creates an assignment using GitHub classroom (GHC), it must be associated with a visible repo. The repo must be a **template** repo. The  teacher names the assignment, and makes other decisions for the assignment, such as whether students have **admin rights**, or the  repos are **public**.  Once the teacher creates an assignment, GHC generates an **invitation link** (URL). This link is then made available to the students in the course. When they accept the invite, they get their own **clone** of the assignment repo. They can then complete their assignment with the contents of the (template) repo as the starting  point, meaning that *all repos have consistent names and consistent file structures*. Crucially, *the names of the repos are based on the assignment name and the students’ GH account names*, and instructors have complete access to all of the repos",
    "Github Classroom Template Repository": "In a GitHub ClassRoom assignment, students get their own “clone” of the template repository specified in the GHC assignment, however it is not a clone in the usual sense. If the teacher changes the template, students who have already accepted the invite cannot just issue a pull and expect to see the changes. There is not direct connection between their repo and the original template. Students who accept the invite after the changes do see the changes however",
    "Github Classroom Branch Protection": "In courses where students work in teams and all team members have full admin rights on their repos, students must enforce protection rules on important branches of their repos, such as the `main` branch. GH provides branch protection rules which prevent a branch from accidental deletion or loss of commit history on the branch due to a `force push`. The most common branch configuration option that students use is to **require pull request reviews before merging** on the `main` branch. This option ensures that a pull request cannot be merged into the protected branch before it receives a specific number (which is configurable) of approving reviews",
    "GitHub Organizations": "A new Organization is created for each course offering, because of the clarity and granularity  it brings with having a separate account encapsulating the relevant  offering’s repos, Teams, and teacher access. This structure and separation also mirrors what is typically seen in LMSs,    in particular Moodle which is used at Universidad de La Laguna. For the management of the Organization, the teachers are added with the Owner role. If TAs are also expected to access student repos, they also need to be added with the Owner role. Students, on the other hand, have the standard Member role (or even Outside Collaborator) to ensure they do not have access to any private repos. In the case of group-based assignments, a Team is created within the Organization, with the corresponding group of students. To  provide access to the private repos, this is defined by the repo’s Manage access setting, by either specifying students individually or as a Team with (usually) just write access. If this seems like a lot of administrative work for an teacher to manage, it is. This is where GHC alleviates many of the manual  process surrounding access to individual and group-based repos, and of course forking repos to follow a consistent naming convention. A Classroom in GHC is associated with a GH Organization, and instructors have the option to either reuse the same GH Organization across multiple Classrooms (i.e. multiple course offerings), or to simply associate with a new Organization each time. Behindthe scenes, GHC is creating the repos, creating Teams, and assigning access to repos for the respective GH Organization"

}